version: '3.8'

services:
  # Base de données PostgreSQL haute performance
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: agriculture_db
      POSTGRES_USER: agri_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    restart: unless-stopped
    networks:
      - agri_network

  # Cache Redis ultra-rapide
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - agri_network

  # API FastAPI haute performance
  fastapi_backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://agri_user:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/agriculture_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - WEATHERAPI_KEY=${WEATHERAPI_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ../models:/app/models
      - ../data:/app/data
    restart: unless-stopped
    networks:
      - agri_network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Interface Streamlit
  streamlit_frontend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.streamlit
    ports:
      - "5000:5000"
    environment:
      - BACKEND_URL=http://fastapi_backend:8000
    depends_on:
      - fastapi_backend
    volumes:
      - ../data:/app/data
      - ../models:/app/models
    restart: unless-stopped
    networks:
      - agri_network

  # Worker pour tâches asynchrones
  celery_worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
    command: celery -A main worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://agri_user:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/agriculture_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ../models:/app/models
      - ../data:/app/data
    restart: unless-stopped
    networks:
      - agri_network

  # Monitoring avec Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - agri_network

  # Reverse proxy Nginx
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - streamlit_frontend
      - fastapi_backend
    restart: unless-stopped
    networks:
      - agri_network

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  agri_network:
    driver: bridge